scp_program -> proc_find_min_path (*	
	-> rrel_params: .proc_find_min_path_params (*
		-> rrel_1: rrel_in: _graph;;
		-> rrel_2: rrel_in: _beg_vertex;;
		-> rrel_3: rrel_in: _end_vertex;;
		-> rrel_4: rrel_out: _path;;
	*);;

	-> rrel_operators: .proc_find_min_path_operator_set (*
//1. добавление всех вершин неориентированного графа во множество непроверенных вершин
		-> .proc_find_min_path_operator1 (*
			 <- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: graph;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _el3;;
			-> rrel_4: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: rrel_vertex;;
		
			->rrel_set_5: rrel_assign: rrel_scp_var: _not_checked_vertexes;;
			=> nrel_then: .proc_find_min_path_operator2;;		
		 	=> nrel_else: .proc_find_min_path_operator6_1;;	//end operator(empty graph)
		*);;
// удаление из множества непроверенных узела начала пути
		-> .proc_find_min_path_operator2 (*
			<- eraseElStr3;;
		 	-> rrel_1: rrel_fixed: rrel_scp_const: _not_checked_vertexes;;
			-> rrel_2: rrel_assign: rrel_erase: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_fixed: rrel_erase: rrel_scp_var: _beg_vertex;;

		 	=> nrel_goto: .proc_find_min_path_operator3;;	//next operator
		*);;
// 2. Создаем начальную волну и добавляем в нее начальную вершину пути.
// 3. Начальная волна - новая волна.
		-> .proc_find_min_path_operator3 (*
			<- genEl;;
			-> rrel_1: rrel_assign: rrel_const: rrel_node: rrel_scp_var: _new_wave;;

			=> nrel_goto: .proc_find_min_path_operator4;;
		*);;

		-> .proc_find_min_path_operator4 (*
			<- genElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _new_wave;;
			-> rrel_2: rrel_assign: rrel_const: rrel_common: rrel_scp_var: _arc;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _beg_vertex;;

			=> nrel_goto: .proc_find_min_path_operator5;;
		*);;

		-> .proc_find_min_path_operator5 (*
			<- call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_search_all_output;;
			-> rrel_2: rrel_fixed: rrel_scp_const: .proc_search_all_output_operator5_params (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _param;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _answer;;
			*);;
		  -> rrel_3: rrel_assign: rrel_scp_var: _descr;;

		  => nrel_goto: .agent_proc_search_all_output_operator6;;
		*);;

		-> .agent_proc_search_all_output_operator6 (*
		  <- waitReturn;;
		  -> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

		  => nrel_goto: .agent_proc_search_all_output_operator_gen_answer;;
		*);;

	*);;
*);;
