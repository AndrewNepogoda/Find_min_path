// ¬озвращает в _vertex2 вершину ,котора€ инцидентена ребру _edge и не €вл€етс€ вершиной  _vertex.
// ”читывает кратное вхождение вершин, т.е. петлю.
//
scp_program -> proc_get_other_vertex_incidence_edge (*
	
	-> rrel_params: .proc_get_other_vertex_incidence_edge_params (*
		-> rrel_1: rrel_in: _edge;;
		-> rrel_2: rrel_in: _vertex1;;
		-> rrel_3: rrel_out: _vertex2;;
	*);;

	-> rrel_operators: .proc_get_other_vertex_incidence_edge_operator_set (*

		// —оздаем копию множества вершин, инцидентных ребру
		//
		-> rrel_init: .proc_get_other_vertex_incidence_edge_operator1 (*
			<- searchElStr3;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _vertex1;;
			-> rrel_2: rrel_fixed: rrel_common: rrel_scp_var: _edge;;
			-> rrel_3: rrel_assign: rrel_scp_var: _vertex2;;	

			=> nrel_then: .proc_get_other_vertex_incidence_edge_operator_return;;
			=> nrel_else: .proc_get_other_vertex_incidence_edge_operator2;;
		*);;

		->.proc_get_other_vertex_incidence_edge_operator2 (*
			<- searchElStr3;;
			-> rrel_1: rrel_assign: rrel_scp_var: _vertex2;;
			-> rrel_2: rrel_fixed: rrel_edge: rrel_scp_var: _edge;;
			-> rrel_3: rrel_fixed: rrel_scp_var: _vertex1;;

			=> nrel_goto: .proc_get_other_vertex_incidence_edge_operator_return;;
		*);;

		-> .proc_get_other_vertex_incidence_edge_operator_return (*
			<- return;;
		*);;	
	*);;
*);;