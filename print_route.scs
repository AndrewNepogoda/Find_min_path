scp_program -> proc_print_route (*	
	-> rrel_params: .proc_print_route_params (*
		-> rrel_1: rrel_in: _route;;
	*);;

	-> rrel_operators: .proc_print_route_operator_set (*
//	Находим ориентированный граф структуры маршрута.
		-> rrel_init: .proc_print_route_operator1*(
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_get_route_struct;;
			-> rrel_2: rrel_fixed: rrel_scp_const: .proc_get_route_struct_params (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
				-> rrel_2: rrel_assign: rrel_scp_var: _route_struct;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator2;;
		*);;

		-> .proc_print_route_operator2 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator3;;
		*);;
//	Находим отношение соответствия маршрута.
		-> .proc_print_route_operator3*(
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_get_route_visit;;
			-> rrel_2: rrel_fixed: rrel_scp_const: .proc_get_route_visit_params (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route;;
				-> rrel_2: rrel_assign: rrel_scp_var: _route_visit;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator4;;
		*);;

		-> .proc_print_route_operator4 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator5;;
		*);;
//	Находим начальную вершину в ориентированном графе структуры маршрута.
		-> .proc_print_route_operator5*(
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_get_route_struct_begin;;
			-> rrel_2: rrel_fixed: rrel_scp_const: .proc_get_route_struct_begin_params (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route_struct;;
				-> rrel_2: rrel_assign: rrel_scp_var: _cur_visit;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator6;;
		*);;

		-> .proc_print_route_operator6 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator7;;
		*);;	
//	Находим вершину, соответствующую начальному посещению.
		-> .proc_print_route_operator7*(
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_bin_ord_at_2;;
			-> rrel_2: rrel_fixed: rrel_scp_const: .proc_bin_ord_at_2_params (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route_visit;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _cur_visit;;
				-> rrel_3: rrel_assign: rrel_scp_var: _visited_vertex;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator8;;
		*);;

		-> .proc_print_route_operator8 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator9;;
		*);;	
//	Выводим текущую посещенную вершину.
		.proc_print_route_operator9 (*
			 <- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _visited_vertex;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _print_value;;
			-> rrel_4: rrel_assign: rrel_pos: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_system_identifier;;
		
			=> nrel_then: .proc_print_route_operator10;;		
		 	=> nrel_else: .proc_print_route_operator_return;;
		*);;

		->.proc_print_route_operator10 (*
			<-print;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _print_value;;

			=>nrel_goto: .proc_print_route_operator11;;
		*);;
//	Находим следующее посещение.
		-> .proc_print_route_operator11*(
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_bin_ord_at_2;;
			-> rrel_2: rrel_fixed: rrel_scp_const: .proc_bin_ord_at_2_params (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route_struct;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _cur_visit;;
				-> rrel_3: rrel_assign: rrel_scp_var: _cur_visit;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator12;;
		*);;

		-> .proc_print_route_operator12 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator13;;
		*);;

		-> .proc_print_route_operator13 (*
			<- ifVarAssign;;
			-> rrel_1: _cur_visit;;

		 	=> nrel_then: .proc_print_route_operator14;;
			=> nrel_else: .proc_print_route_operator_return;;
		*);;

		-> .proc_print_route_operator14*(
			<-call;;
			-> rrel_1: rrel_fixed: rrel_scp_const: proc_bin_ord_at_2;;
			-> rrel_2: rrel_fixed: rrel_scp_const: .proc_bin_ord_at_2_params (*
				-> rrel_1: rrel_fixed: rrel_scp_var: _route_struct;;
				-> rrel_2: rrel_fixed: rrel_scp_var: _cur_visit;;
				-> rrel_3: rrel_assign: rrel_scp_var: _visited_vertex;;
			*);;
			-> rrel_3: rrel_assign: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator15;;
		*);;

		-> .proc_print_route_operator15 (*
			<- waitReturn;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _descr;;

			=> nrel_goto: .proc_print_route_operator16;;
		*);;

		->.proc_print_route_operator16 (*
			<-print;;
			-> rrel_1: rrel_fixed: rrel_scp_var: [ -> ];;

			=>nrel_goto: .proc_print_route_operator17;;
		*);;

		.proc_print_route_operator17 (*
			 <- searchElStr5;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _visited_vertex;;
			-> rrel_2: rrel_assign: rrel_pos_const_perm: rrel_scp_var: _arc2;;
			-> rrel_3: rrel_assign: rrel_scp_var: _print_value;;
			-> rrel_4: rrel_assign: rrel_pos: rrel_scp_var: _arc4;;
			-> rrel_5: rrel_fixed: rrel_scp_const: nrel_system_identifier;;
		
			=> nrel_then: .proc_print_route_operator18;;		
		 	=> nrel_else: .proc_print_route_operator_return;;
		*);;

		->.proc_print_route_operator18 (*
			<-print;;
			-> rrel_1: rrel_fixed: rrel_scp_var: _print_value;;

			=>nrel_goto: .proc_print_route_operator11;;
		*);;

		-> .proc_print_route_operator_return (*
			<- return;;
		*);;
	*);;
*);;
